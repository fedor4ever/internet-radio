EXPORTS
	?CancelConnecting@CIRNetworkController@@QAEXXZ @ 1  NONAME ; void CIRNetworkController::CancelConnecting(void)
	?ChooseAccessPointL@CIRNetworkController@@QAEXH@Z @ 2  NONAME ; void CIRNetworkController::ChooseAccessPointL(int)
	?Close@CIRNetworkController@@QAEXXZ @ 3  NONAME ; void CIRNetworkController::Close(void)
	?DataTransferTracker@CIRNetworkController@@QAEAAVMIRDataTransferTracker@@XZ @ 4  NONAME ; class MIRDataTransferTracker & CIRNetworkController::DataTransferTracker(void)
	?DeleteActiveNetworkObserver@CIRNetworkController@@QAEXAAVMIRActiveNetworkObserver@@@Z @ 5  NONAME ; void CIRNetworkController::DeleteActiveNetworkObserver(class MIRActiveNetworkObserver &)
	?GetAccessPointList@CIRNetworkController@@QBEPBVCDesC16Array@@XZ @ 6  NONAME ; class CDesC16Array const * CIRNetworkController::GetAccessPointList(void) const
	?GetApList@CIRNetworkController@@QBE?BV?$RArray@K@@XZ @ 7  NONAME ; class RArray<unsigned long> const CIRNetworkController::GetApList(void) const
	?GetBearerList@CIRNetworkController@@QBE?BV?$RArray@K@@XZ @ 8  NONAME ; class RArray<unsigned long> const CIRNetworkController::GetBearerList(void) const
	?GetIAPId@CIRNetworkController@@QBEHAAK@Z @ 9  NONAME ; int CIRNetworkController::GetIAPId(unsigned long &) const
	?GetIRConnection@CIRNetworkController@@QAEAAVRConnection@@XZ @ 10  NONAME ; class RConnection & CIRNetworkController::GetIRConnection(void)
	?GetIRSocketServer@CIRNetworkController@@QAEAAVRSocketServ@@XZ @ 11  NONAME ; class RSocketServ & CIRNetworkController::GetIRSocketServer(void)
	?GetNetworkList@CIRNetworkController@@QBE?BV?$RArray@K@@XZ @ 12  NONAME ; class RArray<unsigned long> const CIRNetworkController::GetNetworkList(void) const
	?GetNetworkStatus@CIRNetworkController@@QBEHXZ @ 13  NONAME ; int CIRNetworkController::GetNetworkStatus(void) const
	?GetUAProfString@CIRNetworkController@@QAEPAVHBufC8@@XZ @ 14  NONAME ; class HBufC8 * CIRNetworkController::GetUAProfString(void)
	?GetWapProfString@CIRNetworkController@@QAEPAVHBufC8@@XZ @ 15  NONAME ; class HBufC8 * CIRNetworkController::GetWapProfString(void)
	?IdentifyConnectionType@CIRNetworkController@@QBE?AW4TIRConnectionType@@XZ @ 16  NONAME ; enum TIRConnectionType CIRNetworkController::IdentifyConnectionType(void) const
	?InitializeHttpSessionL@CIRNetworkController@@QAEXABVRHTTPSession@@W4TIRTransferCategory@MIRDataTransferTracker@@@Z @ 17  NONAME ; void CIRNetworkController::InitializeHttpSessionL(class RHTTPSession const &, enum MIRDataTransferTracker::TIRTransferCategory)
	?IsHandingOverConnection@CIRNetworkController@@QAEHXZ @ 18  NONAME ; int CIRNetworkController::IsHandingOverConnection(void)
	?IsOfflineMode@CIRNetworkController@@QAEHXZ @ 19  NONAME ; int CIRNetworkController::IsOfflineMode(void)
	?IsWlanSupported@CIRNetworkController@@QBEHXZ @ 20  NONAME ; int CIRNetworkController::IsWlanSupported(void) const
	?LogoDataTransferTracker@CIRNetworkController@@QAEAAVMIRDataTransferTracker@@XZ @ 21  NONAME ; class MIRDataTransferTracker & CIRNetworkController::LogoDataTransferTracker(void)
	?NewL@CIRNetworkObserver@@SAPAV1@PAVCIRNetworkController@@@Z @ 22  NONAME ; class CIRNetworkObserver * CIRNetworkObserver::NewL(class CIRNetworkController *)
	?NotifyActiveNetworkObserversL@CIRNetworkController@@QAEXW4TIRNetworkEvent@@@Z @ 23  NONAME ; void CIRNetworkController::NotifyActiveNetworkObserversL(enum TIRNetworkEvent)
	?OpenL@CIRNetworkController@@SAPAV1@PAVMIRNetworkController@@@Z @ 24  NONAME ; class CIRNetworkController * CIRNetworkController::OpenL(class MIRNetworkController *)
	?RegisterActiveNetworkObserverL@CIRNetworkController@@QAEXAAVMIRActiveNetworkObserver@@@Z @ 25  NONAME ; void CIRNetworkController::RegisterActiveNetworkObserverL(class MIRActiveNetworkObserver &)
	?RegisterLogoDataTransferTrackerL@CIRNetworkController@@QAEXAAVRHTTPSession@@@Z @ 26  NONAME ; void CIRNetworkController::RegisterLogoDataTransferTrackerL(class RHTTPSession &)
	?ResetConnectionStatus@CIRNetworkController@@QAEXXZ @ 27  NONAME ; void CIRNetworkController::ResetConnectionStatus(void)

